{"ast":null,"code":"import _defineProperty from \"/Users/stijnheynderickx/IdeaProjects/mellow2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/stijnheynderickx/IdeaProjects/mellow2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stijnheynderickx/IdeaProjects/mellow2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stijnheynderickx/IdeaProjects/mellow2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stijnheynderickx/IdeaProjects/mellow2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stijnheynderickx/IdeaProjects/mellow2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/stijnheynderickx/IdeaProjects/mellow2/src/components/Contactform/Contactform.jsx\";\nimport React, { Component } from 'react';\nimport { Button, Col, ControlLabel, FormGroup } from \"react-bootstrap\";\nimport FormValidator from '../../components/FormValidator/FormValidator';\n\nvar Contactform =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Contactform, _Component);\n\n  function Contactform(props) {\n    var _this;\n\n    _classCallCheck(this, Contactform);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Contactform).call(this, props));\n\n    _this.handleInputChange = function (event) {\n      event.preventDefault();\n\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.handleFormSubmit = function (event) {\n      event.preventDefault();\n\n      var validation = _this.validator.validate(_this.state);\n\n      _this.setState({\n        validation: validation\n      });\n\n      _this.submitted = true;\n\n      if (validation.isValid) {// handle actual form submission here\n      }\n    };\n\n    _this.validator = new FormValidator([{\n      field: 'firstname',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Uw voornaam is verplicht.'\n    }, {\n      field: 'lastname',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Achternaam is verplicht.'\n    }, {\n      field: 'email',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Email is required.'\n    }, {\n      field: 'email',\n      method: 'isEmail',\n      validWhen: true,\n      message: 'That is not a valid email.'\n    }]);\n    _this.state = {\n      firstname: '',\n      lastname: '',\n      email: '',\n      validation: _this.validator.valid()\n    };\n    _this.submitted = false; //    this.handleChange = this.handleChange.bind(this);\n    //  this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    return _this;\n  }\n\n  _createClass(Contactform, [{\n    key: \"render\",\n    value: function render() {\n      var validation = this.submitted ? // if the form has been submitted at least once\n      this.validator.validate(this.state) : // then check validity every time we render\n      this.state.validation; // otherwise just use what's in state\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        horizontal: true,\n        className: \"contactForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        className: validation.firstname.isInvalid && 'has-error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Col, {\n        componentClass: ControlLabel,\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"firstname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Voornaam\")), React.createElement(Col, {\n        smOffset: 1,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"firstname\",\n        className: \"form-control\",\n        name: \"firstname\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, validation.firstname.message))), React.createElement(FormGroup, {\n        className: validation.lastname.isInvalid && 'has-error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Col, {\n        componentClass: ControlLabel,\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"lastname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Achternaam\")), React.createElement(Col, {\n        smOffset: 1,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"lastname\",\n        className: \"form-control\",\n        name: \"lastname\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, validation.lastname.message))), React.createElement(FormGroup, {\n        className: validation.email.isInvalid && 'has-error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Col, {\n        componentClass: ControlLabel,\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Email\")), React.createElement(Col, {\n        smOffset: 1,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"email\",\n        className: \"form-control\",\n        name: \"email\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, validation.email.message))), React.createElement(FormGroup, {\n        className: validation.email.isInvalid && 'has-error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Col, {\n        componentClass: ControlLabel,\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Gsm of telefoon\")), React.createElement(Col, {\n        smOffset: 1,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"phone\",\n        className: \"form-control\",\n        name: \"phone\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Col, {\n        smOffset: 4,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleFormSubmit,\n        className: \"mellow-btn uppercase\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Versturen\")))));\n    }\n  }]);\n\n  return Contactform;\n}(Component);\n\nexport default Contactform;","map":{"version":3,"sources":["/Users/stijnheynderickx/IdeaProjects/mellow2/src/components/Contactform/Contactform.jsx"],"names":["React","Component","Button","Col","ControlLabel","FormGroup","FormValidator","Contactform","props","handleInputChange","event","preventDefault","setState","target","name","value","handleFormSubmit","validation","validator","validate","state","submitted","isValid","field","method","validWhen","message","firstname","lastname","email","valid","isInvalid"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Col, ControlLabel, FormGroup} from \"react-bootstrap\";\nimport FormValidator from '../../components/FormValidator/FormValidator';\n\nclass Contactform extends Component {\n    constructor(props) {\n        super(props);\n        this.validator = new FormValidator([\n            {\n                field: 'firstname',\n                method: 'isEmpty',\n                validWhen: false,\n                message: 'Uw voornaam is verplicht.'\n            },\n            {\n                field: 'lastname',\n                method: 'isEmpty',\n                validWhen: false,\n                message: 'Achternaam is verplicht.'\n            },\n            {\n                field: 'email',\n                method: 'isEmpty',\n                validWhen: false,\n                message: 'Email is required.'\n            },\n            {\n                field: 'email',\n                method: 'isEmail',\n                validWhen: true,\n                message: 'That is not a valid email.'\n            },\n        ]);\n\n        this.state = { firstname: '', lastname: '',  email: '',\n            validation: this.validator.valid()\n        };\n        this.submitted = false;\n        //    this.handleChange = this.handleChange.bind(this);\n        //  this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    }\n\n    handleInputChange = event => {\n        event.preventDefault();\n\n        this.setState({\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n\n        const validation = this.validator.validate(this.state);\n        this.setState({ validation });\n        this.submitted = true;\n\n        if (validation.isValid) {\n            // handle actual form submission here\n        }\n    };\n    render() {\n        let validation = this.submitted ?                         // if the form has been submitted at least once\n            this.validator.validate(this.state) :   // then check validity every time we render\n            this.state.validation;                   // otherwise just use what's in state\n        return (\n            <div>\n                <form horizontal className=\"contactForm\">\n\n\n\n                    <FormGroup className={validation.firstname.isInvalid && 'has-error'}>\n                        <Col componentClass={ControlLabel} sm={3}>\n                            <label htmlFor=\"firstname\">Voornaam</label>\n                        </Col>\n                        <Col smOffset={1} sm={8}>\n                            <input type=\"firstname\" className=\"form-control\"\n                                   name=\"firstname\"\n                                   onChange={this.handleInputChange}\n                            />\n                            <span className=\"help-block\">{validation.firstname.message}</span>\n                        </Col>\n                    </FormGroup>\n\n                    <FormGroup className={validation.lastname.isInvalid && 'has-error'}>\n                        <Col componentClass={ControlLabel} sm={3}>\n                            <label htmlFor=\"lastname\">Achternaam</label>\n                        </Col>\n                        <Col smOffset={1} sm={8}>\n                            <input type=\"lastname\" className=\"form-control\"\n                                   name=\"lastname\"\n                                   onChange={this.handleInputChange}\n                            />\n                            <span className=\"help-block\">{validation.lastname.message}</span>\n                        </Col>\n                    </FormGroup>\n\n                    <FormGroup className={validation.email.isInvalid && 'has-error'}>\n                        <Col componentClass={ControlLabel} sm={3}>\n                            <label htmlFor=\"email\">Email</label>\n                        </Col>\n                        <Col smOffset={1} sm={8}>\n                            <input type=\"email\" className=\"form-control\"\n                                   name=\"email\"\n                                   onChange={this.handleInputChange}\n                            />\n                            <span className=\"help-block\">{validation.email.message}</span>\n                        </Col>\n                    </FormGroup>\n\n                    <FormGroup className={validation.email.isInvalid && 'has-error'}>\n                        <Col componentClass={ControlLabel} sm={3}>\n                            <label htmlFor=\"phone\">Gsm of telefoon</label>\n                        </Col>\n                        <Col smOffset={1} sm={8}>\n                            <input type=\"phone\" className=\"form-control\"\n                                   name=\"phone\"\n                                   onChange={this.handleInputChange}\n                            />\n                        </Col>\n                    </FormGroup>\n\n\n                    <FormGroup>\n                        <Col smOffset={4} sm={8}>\n                            <Button onClick={this.handleFormSubmit} className=\"mellow-btn uppercase\">\n                                Versturen\n                            </Button>\n                        </Col>\n                    </FormGroup>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Contactform;"]},"metadata":{},"sourceType":"module"}