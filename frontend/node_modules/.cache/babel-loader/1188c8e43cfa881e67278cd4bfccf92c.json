{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/es6/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/es6/objectWithoutProperties\";\nimport _inheritsLoose from \"@babel/runtime/helpers/es6/inheritsLoose\";\n/* eslint-disable jsx-a11y/label-has-for */\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport { bsClass, getClassSet, prefix, splitBsProps } from './utils/bootstrapUtils';\nvar propTypes = {\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  title: PropTypes.string,\n\n  /**\n   * Only valid if `inline` is not set.\n   */\n  validationState: PropTypes.oneOf(['success', 'warning', 'error', null]),\n\n  /**\n   * Attaches a ref to the `<input>` element. Only functions can be used here.\n   *\n   * ```js\n   * <Checkbox inputRef={ref => { this.input = ref; }} />\n   * ```\n   */\n  inputRef: PropTypes.func\n};\nvar defaultProps = {\n  inline: false,\n  disabled: false,\n  title: ''\n};\n\nvar Checkbox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Checkbox, _React$Component);\n\n  function Checkbox() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Checkbox.prototype;\n\n  _proto.render = function render() {\n    var _props = this.props,\n        inline = _props.inline,\n        disabled = _props.disabled,\n        validationState = _props.validationState,\n        inputRef = _props.inputRef,\n        className = _props.className,\n        style = _props.style,\n        title = _props.title,\n        children = _props.children,\n        props = _objectWithoutProperties(_props, [\"inline\", \"disabled\", \"validationState\", \"inputRef\", \"className\", \"style\", \"title\", \"children\"]);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    var input = React.createElement(\"input\", _extends({}, elementProps, {\n      ref: inputRef,\n      type: \"checkbox\",\n      disabled: disabled\n    }));\n\n    if (inline) {\n      var _classes2;\n\n      var _classes = (_classes2 = {}, _classes2[prefix(bsProps, 'inline')] = true, _classes2.disabled = disabled, _classes2); // Use a warning here instead of in propTypes to get better-looking\n      // generated documentation.\n\n\n      process.env.NODE_ENV !== \"production\" ? warning(!validationState, '`validationState` is ignored on `<Checkbox inline>`. To display ' + 'validation state on an inline checkbox, set `validationState` on a ' + 'parent `<FormGroup>` or other element instead.') : void 0;\n      return React.createElement(\"label\", {\n        className: classNames(className, _classes),\n        style: style,\n        title: title\n      }, input, children);\n    }\n\n    var classes = _extends({}, getClassSet(bsProps), {\n      disabled: disabled\n    });\n\n    if (validationState) {\n      classes[\"has-\" + validationState] = true;\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames(className, classes),\n      style: style\n    }, React.createElement(\"label\", {\n      title: title\n    }, input, children));\n  };\n\n  return Checkbox;\n}(React.Component);\n\nCheckbox.propTypes = propTypes;\nCheckbox.defaultProps = defaultProps;\nexport default bsClass('checkbox', Checkbox);","map":null,"metadata":{},"sourceType":"module"}