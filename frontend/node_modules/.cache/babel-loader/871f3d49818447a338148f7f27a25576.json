{"ast":null,"code":"import _defineProperty from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/src/components/Contactform/Contactform.jsx\";\nimport React, { Component } from 'react';\nimport { Button, Col, ControlLabel, FormGroup } from \"react-bootstrap\";\nimport FormValidator from '../../components/FormValidator/FormValidator';\n\nvar Contactform =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Contactform, _Component);\n\n  function Contactform(props) {\n    var _this;\n\n    _classCallCheck(this, Contactform);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Contactform).call(this, props));\n\n    _this.handleInputChange = function (event) {\n      event.preventDefault();\n\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.handleFormSubmit = function (event) {\n      event.preventDefault();\n\n      var validation = _this.validator.validate(_this.state);\n\n      _this.setState({\n        validation: validation\n      });\n\n      _this.submitted = true;\n\n      if (validation.isValid) {// handle actual form submission here\n      }\n    };\n\n    _this.validator = new FormValidator([{\n      field: 'firstname',\n      method: 'isAlpha',\n      validWhen: false,\n      message: 'Uw voornaam is verplicht.'\n    }, {\n      field: 'lastname',\n      method: 'isAlpha',\n      validWhen: false,\n      message: 'Achternaam is verplicht.'\n    }, {\n      field: 'email',\n      method: 'isEmail',\n      validWhen: false,\n      message: 'Email is verplicht.'\n    }, {\n      field: 'phone',\n      method: 'isPhone',\n      validWhen: true,\n      message: 'Het nummer mag alleen cijfers bevatten.'\n    }, {\n      field: 'info',\n      method: 'isAlphanumeric',\n      validWhen: true,\n      message: 'Gelieve uw invoer even na te kijken.'\n    }]);\n    _this.state = {\n      firstname: '',\n      lastname: '',\n      email: '',\n      validation: _this.validator.valid()\n    };\n    _this.submitted = false; //    this.handleChange = this.handleChange.bind(this);\n    //  this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    return _this;\n  }\n\n  _createClass(Contactform, [{\n    key: \"render\",\n    value: function render() {\n      var validation = this.submitted ? // if the form has been submitted at least once\n      this.validator.validate(this.state) : // then check validity every time we render\n      this.state.validation; // otherwise just use what's in state\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        horizontal: true,\n        className: \"contactForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        className: validation.firstname.isInvalid && 'has-error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Col, {\n        componentClass: ControlLabel,\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"firstname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Voornaam\")), React.createElement(Col, {\n        smOffset: 1,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"firstname\",\n        className: \"form-control\",\n        name: \"firstname\",\n        required: true,\n        minLength: \"2\",\n        maxLength: \"15\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, validation.firstname.message))), React.createElement(FormGroup, {\n        className: validation.lastname.isInvalid && 'has-error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Col, {\n        componentClass: ControlLabel,\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"lastname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Achternaam\")), React.createElement(Col, {\n        smOffset: 1,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"lastname\",\n        className: \"form-control\",\n        name: \"lastname\",\n        required: true,\n        minLength: \"2\",\n        maxLength: \"15\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, validation.lastname.message))), React.createElement(FormGroup, {\n        className: validation.email.isInvalid && 'has-error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Col, {\n        componentClass: ControlLabel,\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Email\")), React.createElement(Col, {\n        smOffset: 1,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"email\",\n        className: \"form-control\",\n        name: \"email\",\n        required: true,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, validation.email.message))), React.createElement(FormGroup, {\n        className: validation.phone.isInvalid && 'has-error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Col, {\n        componentClass: ControlLabel,\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Gsm of telefoon\")), React.createElement(Col, {\n        smOffset: 1,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"phone\",\n        className: \"form-control\",\n        name: \"phone\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        className: validation.info.isInvalid && 'has-error',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Col, {\n        componentClass: ControlLabel,\n        md: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"\",\n        htmlFor: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Uw vraag\")), React.createElement(Col, {\n        smOffset: 1,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"textarea\",\n        id: \"info\",\n        value: this.state.info,\n        onChange: this.handleInputChange,\n        name: \"info\",\n        rows: \"8\",\n        cols: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Col, {\n        smOffset: 4,\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleFormSubmit,\n        className: \"mellow-btn uppercase\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Versturen\")))));\n    }\n  }]);\n\n  return Contactform;\n}(Component);\n\nexport default Contactform;","map":{"version":3,"sources":["/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/src/components/Contactform/Contactform.jsx"],"names":["React","Component","Button","Col","ControlLabel","FormGroup","FormValidator","Contactform","props","handleInputChange","event","preventDefault","setState","target","name","value","handleFormSubmit","validation","validator","validate","state","submitted","isValid","field","method","validWhen","message","firstname","lastname","email","valid","isInvalid","phone","info"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,EAAgBC,GAAhB,EAAqBC,YAArB,EAAmCC,SAAnC,QAAmD,iBAAnD;AACA,OAAOC,aAAP,MAA0B,8CAA1B;;IAEMC,W;;;;;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN;;AADe,UA8CnBC,iBA9CmB,GA8CC,UAAAC,KAAK,EAAI;AACzBA,MAAAA,KAAK,CAACC,cAAN;;AAEA,YAAKC,QAAL,qBACKF,KAAK,CAACG,MAAN,CAAaC,IADlB,EACyBJ,KAAK,CAACG,MAAN,CAAaE,KADtC;AAGH,KApDkB;;AAAA,UAsDnBC,gBAtDmB,GAsDA,UAAAN,KAAK,EAAI;AACxBA,MAAAA,KAAK,CAACC,cAAN;;AAEA,UAAMM,UAAU,GAAG,MAAKC,SAAL,CAAeC,QAAf,CAAwB,MAAKC,KAA7B,CAAnB;;AACA,YAAKR,QAAL,CAAc;AAACK,QAAAA,UAAU,EAAVA;AAAD,OAAd;;AACA,YAAKI,SAAL,GAAiB,IAAjB;;AAEA,UAAGJ,UAAU,CAACK,OAAd,EAAuB,CACnB;AACH;AACJ,KAhEkB;;AAEf,UAAKJ,SAAL,GAAiB,IAAIZ,aAAJ,CAAkB,CAC/B;AACIiB,MAAAA,KAAK,EAAM,WADf;AAEIC,MAAAA,MAAM,EAAK,SAFf;AAGIC,MAAAA,SAAS,EAAE,KAHf;AAIIC,MAAAA,OAAO,EAAI;AAJf,KAD+B,EAO/B;AACIH,MAAAA,KAAK,EAAM,UADf;AAEIC,MAAAA,MAAM,EAAK,SAFf;AAGIC,MAAAA,SAAS,EAAE,KAHf;AAIIC,MAAAA,OAAO,EAAI;AAJf,KAP+B,EAa/B;AACIH,MAAAA,KAAK,EAAM,OADf;AAEIC,MAAAA,MAAM,EAAK,SAFf;AAGIC,MAAAA,SAAS,EAAE,KAHf;AAIIC,MAAAA,OAAO,EAAI;AAJf,KAb+B,EAmB/B;AACIH,MAAAA,KAAK,EAAM,OADf;AAEIC,MAAAA,MAAM,EAAK,SAFf;AAGIC,MAAAA,SAAS,EAAE,IAHf;AAIIC,MAAAA,OAAO,EAAI;AAJf,KAnB+B,EAyB/B;AACIH,MAAAA,KAAK,EAAM,MADf;AAEIC,MAAAA,MAAM,EAAK,gBAFf;AAGIC,MAAAA,SAAS,EAAE,IAHf;AAIIC,MAAAA,OAAO,EAAI;AAJf,KAzB+B,CAAlB,CAAjB;AAiCA,UAAKN,KAAL,GAAa;AACTO,MAAAA,SAAS,EAAG,EADH;AAETC,MAAAA,QAAQ,EAAI,EAFH;AAGTC,MAAAA,KAAK,EAAO,EAHH;AAITZ,MAAAA,UAAU,EAAE,MAAKC,SAAL,CAAeY,KAAf;AAJH,KAAb;AAMA,UAAKT,SAAL,GAAiB,KAAjB,CAzCe,CA0Cf;AACA;;AA3Ce;AA4ClB;;;;6BAsBQ;AACL,UAAIJ,UAAU,GAAG,KAAKI,SAAL,GAAyC;AAClD,WAAKH,SAAL,CAAeC,QAAf,CAAwB,KAAKC,KAA7B,CADS,GAC+B;AACxC,WAAKA,KAAL,CAAWH,UAFnB,CADK,CAG4C;;AACjD,aACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,UAAU,MAAhB;AAAiB,QAAA,SAAS,EAAC,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAEA,UAAU,CAACU,SAAX,CAAqBI,SAArB,IAAkC,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAE3B,YAArB;AAAmC,QAAA,EAAE,EAAE,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,EAII,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,IAAI,EAAC,WAAZ;AACO,QAAA,SAAS,EAAC,cADjB;AAEO,QAAA,IAAI,EAAC,WAFZ;AAGO,QAAA,QAAQ,MAHf;AAIO,QAAA,SAAS,EAAC,GAJjB;AAKO,QAAA,SAAS,EAAC,IALjB;AAMO,QAAA,QAAQ,EAAE,KAAKK,iBANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EASI;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BQ,UAAU,CAACU,SAAX,CAAqBD,OAAnD,CATJ,CAJJ,CADJ,EAiBI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAET,UAAU,CAACW,QAAX,CAAoBG,SAApB,IAAiC,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAE3B,YAArB;AAAmC,QAAA,EAAE,EAAE,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ,EAII,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,IAAI,EAAC,UAAZ;AACO,QAAA,SAAS,EAAC,cADjB;AAEO,QAAA,IAAI,EAAC,UAFZ;AAGO,QAAA,QAAQ,MAHf;AAIO,QAAA,SAAS,EAAC,GAJjB;AAKO,QAAA,SAAS,EAAC,IALjB;AAMO,QAAA,QAAQ,EAAE,KAAKK,iBANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EASI;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BQ,UAAU,CAACW,QAAX,CAAoBF,OAAlD,CATJ,CAJJ,CAjBJ,EAiCI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAET,UAAU,CAACY,KAAX,CAAiBE,SAAjB,IAA8B,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAE3B,YAArB;AAAmC,QAAA,EAAE,EAAE,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,CADJ,EAII,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,IAAI,EAAC,OAAZ;AACO,QAAA,SAAS,EAAC,cADjB;AAEO,QAAA,IAAI,EAAC,OAFZ;AAGO,QAAA,QAAQ,MAHf;AAIO,QAAA,QAAQ,EAAE,KAAKK,iBAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAOI;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BQ,UAAU,CAACY,KAAX,CAAiBH,OAA/C,CAPJ,CAJJ,CAjCJ,EA+CI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAET,UAAU,CAACe,KAAX,CAAiBD,SAAjB,IAA8B,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAE3B,YAArB;AAAmC,QAAA,EAAE,EAAE,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,CADJ,EAII,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,IAAI,EAAC,OAAZ;AACO,QAAA,SAAS,EAAC,cADjB;AAEO,QAAA,IAAI,EAAC,OAFZ;AAGO,QAAA,QAAQ,EAAE,KAAKK,iBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,CA/CJ,EA2DI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAEQ,UAAU,CAACgB,IAAX,CAAgBF,SAAhB,IAA6B,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,cAAc,EAAE3B,YAArB;AAAmC,QAAA,EAAE,EAAE,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,EAAjB;AAAoB,QAAA,OAAO,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,EAII,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAU,QAAA,SAAS,EAAC,UAApB;AACU,QAAA,EAAE,EAAC,MADb;AAEU,QAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWa,IAF5B;AAGU,QAAA,QAAQ,EAAE,KAAKxB,iBAHzB;AAIU,QAAA,IAAI,EAAC,MAJf;AAKU,QAAA,IAAI,EAAC,GALf;AAMU,QAAA,IAAI,EAAC,IANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,CA3DJ,EA0EI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,CAAf;AAAkB,QAAA,EAAE,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKO,gBAAtB;AAAwC,QAAA,SAAS,EAAC,sBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CADJ,CA1EJ,CADJ,CADR;AAsFH;;;;EA7JqBf,S;;AAgK1B,eAAeM,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Col, ControlLabel, FormGroup} from \"react-bootstrap\";\nimport FormValidator from '../../components/FormValidator/FormValidator';\n\nclass Contactform extends Component {\n    constructor(props) {\n        super(props);\n        this.validator = new FormValidator([\n            {\n                field    : 'firstname',\n                method   : 'isAlpha',\n                validWhen: false,\n                message  : 'Uw voornaam is verplicht.'\n            },\n            {\n                field    : 'lastname',\n                method   : 'isAlpha',\n                validWhen: false,\n                message  : 'Achternaam is verplicht.'\n            },\n            {\n                field    : 'email',\n                method   : 'isEmail',\n                validWhen: false,\n                message  : 'Email is verplicht.'\n            },\n            {\n                field    : 'phone',\n                method   : 'isPhone',\n                validWhen: true,\n                message  : 'Het nummer mag alleen cijfers bevatten.'\n            },\n            {\n                field    : 'info',\n                method   : 'isAlphanumeric',\n                validWhen: true,\n                message  : 'Gelieve uw invoer even na te kijken.'\n            },\n        ]);\n\n        this.state = {\n            firstname : '',\n            lastname  : '',\n            email     : '',\n            validation: this.validator.valid()\n        };\n        this.submitted = false;\n        //    this.handleChange = this.handleChange.bind(this);\n        //  this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    }\n\n    handleInputChange = event => {\n        event.preventDefault();\n\n        this.setState({\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n\n        const validation = this.validator.validate(this.state);\n        this.setState({validation});\n        this.submitted = true;\n\n        if(validation.isValid) {\n            // handle actual form submission here\n        }\n    };\n\n    render() {\n        let validation = this.submitted ?                         // if the form has been submitted at least once\n                this.validator.validate(this.state) :   // then check validity every time we render\n                this.state.validation;                   // otherwise just use what's in state\n        return (\n                <div>\n                    <form horizontal className=\"contactForm\">\n                        <FormGroup className={validation.firstname.isInvalid && 'has-error'}>\n                            <Col componentClass={ControlLabel} sm={3}>\n                                <label htmlFor=\"firstname\">Voornaam</label>\n                            </Col>\n                            <Col smOffset={1} sm={8}>\n                                <input type=\"firstname\"\n                                       className=\"form-control\"\n                                       name=\"firstname\"\n                                       required\n                                       minLength=\"2\"\n                                       maxLength=\"15\"\n                                       onChange={this.handleInputChange}\n                                />\n                                <span className=\"help-block\">{validation.firstname.message}</span>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup className={validation.lastname.isInvalid && 'has-error'}>\n                            <Col componentClass={ControlLabel} sm={3}>\n                                <label htmlFor=\"lastname\">Achternaam</label>\n                            </Col>\n                            <Col smOffset={1} sm={8}>\n                                <input type=\"lastname\"\n                                       className=\"form-control\"\n                                       name=\"lastname\"\n                                       required\n                                       minLength=\"2\"\n                                       maxLength=\"15\"\n                                       onChange={this.handleInputChange}\n                                />\n                                <span className=\"help-block\">{validation.lastname.message}</span>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup className={validation.email.isInvalid && 'has-error'}>\n                            <Col componentClass={ControlLabel} sm={3}>\n                                <label htmlFor=\"email\">Email</label>\n                            </Col>\n                            <Col smOffset={1} sm={8}>\n                                <input type=\"email\"\n                                       className=\"form-control\"\n                                       name=\"email\"\n                                       required\n                                       onChange={this.handleInputChange}\n                                />\n                                <span className=\"help-block\">{validation.email.message}</span>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup className={validation.phone.isInvalid && 'has-error'}>\n                            <Col componentClass={ControlLabel} sm={3}>\n                                <label htmlFor=\"phone\">Gsm of telefoon</label>\n                            </Col>\n                            <Col smOffset={1} sm={8}>\n                                <input type=\"phone\"\n                                       className=\"form-control\"\n                                       name=\"phone\"\n                                       onChange={this.handleInputChange}\n                                />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup className={validation.info.isInvalid && 'has-error'}>\n                            <Col componentClass={ControlLabel} md={3}>\n                                <label className=\"\" htmlFor=\"info\">Uw vraag</label>\n                            </Col>\n                            <Col smOffset={1} sm={8}>\n                                <textarea className=\"textarea\"\n                                          id=\"info\"\n                                          value={this.state.info}\n                                          onChange={this.handleInputChange}\n                                          name=\"info\"\n                                          rows=\"8\"\n                                          cols=\"50\"\n                                />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col smOffset={4} sm={8}>\n                                <Button onClick={this.handleFormSubmit} className=\"mellow-btn uppercase\">\n                                    Versturen\n                                </Button>\n                            </Col>\n                        </FormGroup>\n                    </form>\n                </div>\n        );\n    }\n}\n\nexport default Contactform;"]},"metadata":{},"sourceType":"module"}