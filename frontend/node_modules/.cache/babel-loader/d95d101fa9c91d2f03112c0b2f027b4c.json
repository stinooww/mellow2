{"ast":null,"code":"import _classCallCheck from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectWithoutProperties from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/src/components/Contactform/Reactcontactform.jsx\";\nimport React from 'react';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nvar formikEnhancer = withFormik({\n  validationSchema: Yup.object().shape({\n    firstName: Yup.string().min(2, \"C'mon, your name is longer than that\").required('First name is required.'),\n    lastName: Yup.string().min(2, \"C'mon, your name is longer than that\").required('Last name is required.'),\n    email: Yup.string().email('Invalid email address').required('Email is required!')\n  }),\n  mapPropsToValues: function mapPropsToValues(_ref) {\n    var user = _ref.user;\n    return _objectSpread({}, user);\n  },\n  handleSubmit: function handleSubmit(payload, _ref2) {\n    var setSubmitting = _ref2.setSubmitting;\n    alert(payload.email);\n    setSubmitting(false);\n  },\n  displayName: 'MyForm'\n});\n\nvar InputFeedback = function InputFeedback(_ref3) {\n  var error = _ref3.error;\n  return error ? React.createElement(\"div\", {\n    className: \"input-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, error) : null;\n};\n\nvar Label = function Label(_ref4) {\n  var error = _ref4.error,\n      className = _ref4.className,\n      children = _ref4.children,\n      props = _objectWithoutProperties(_ref4, [\"error\", \"className\", \"children\"]);\n\n  return React.createElement(\"label\", Object.assign({\n    className: \"label\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), children);\n};\n\nvar TextInput = function TextInput(_ref5) {\n  var type = _ref5.type,\n      id = _ref5.id,\n      label = _ref5.label,\n      error = _ref5.error,\n      value = _ref5.value,\n      onChange = _ref5.onChange,\n      className = _ref5.className,\n      props = _objectWithoutProperties(_ref5, [\"type\", \"id\", \"label\", \"error\", \"value\", \"onChange\", \"className\"]);\n\n  var classes = classnames('input-group', {\n    'animated shake error': !!error\n  }, className);\n  return React.createElement(\"div\", {\n    className: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: id,\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, label), React.createElement(\"input\", Object.assign({\n    id: id,\n    className: \"text-input\",\n    type: type,\n    value: value,\n    onChange: onChange\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(InputFeedback, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n};\n\nvar MyForm = function MyForm(props) {\n  var values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleSubmit = props.handleSubmit,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(TextInput, {\n    id: \"firstName\",\n    type: \"text\",\n    label: \"First Name\",\n    placeholder: \"John\",\n    error: touched.firstName && errors.firstName,\n    value: values.firstName,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(TextInput, {\n    id: \"lastName\",\n    type: \"text\",\n    label: \"Last Name\",\n    placeholder: \"Doe\",\n    error: touched.lastName && errors.lastName,\n    value: values.lastName,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(TextInput, {\n    id: \"email\",\n    type: \"email\",\n    label: \"Email\",\n    placeholder: \"Enter your email\",\n    error: touched.email && errors.email,\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"outline\",\n    onClick: handleReset,\n    disabled: !dirty || isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nvar MyEnhancedForm = formikEnhancer(MyForm);\n\nvar Reactcontactform =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Reactcontactform, _React$Component);\n\n  function Reactcontactform() {\n    _classCallCheck(this, Reactcontactform);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Reactcontactform).apply(this, arguments));\n  }\n\n  _createClass(Reactcontactform, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MyEnhancedForm, {\n        user: {\n          email: '',\n          firstName: '',\n          lastName: ''\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Reactcontactform;\n}(React.Component);\n\nexport default Reactcontactform;","map":{"version":3,"sources":["/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/src/components/Contactform/Reactcontactform.jsx"],"names":["React","withFormik","Yup","formikEnhancer","validationSchema","object","shape","firstName","string","min","required","lastName","email","mapPropsToValues","user","handleSubmit","payload","setSubmitting","alert","displayName","InputFeedback","error","Label","className","children","props","TextInput","type","id","label","value","onChange","classes","classnames","MyForm","values","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","MyEnhancedForm","Reactcontactform","Component"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\n\n\n\n\n\n\n    const formikEnhancer = withFormik({\n        validationSchema: Yup.object().shape({\n            firstName: Yup.string()\n                    .min(2, \"C'mon, your name is longer than that\")\n                    .required('First name is required.'),\n            lastName: Yup.string()\n                    .min(2, \"C'mon, your name is longer than that\")\n                    .required('Last name is required.'),\n            email: Yup.string()\n                    .email('Invalid email address')\n                    .required('Email is required!'),\n        }),\n\n        mapPropsToValues: ({ user }) => ({\n            ...user,\n        }),\n        handleSubmit: (payload, { setSubmitting }) => {\n            alert(payload.email);\n            setSubmitting(false);\n        },\n        displayName: 'MyForm',\n    });\n    const InputFeedback = ({ error }) =>\n            error ? <div className=\"input-feedback\">{error}</div> : null;\n\n    const Label = ({ error, className, children, ...props }) => {\n        return (\n                <label className=\"label\" {...props}>\n                    {children}\n                </label>\n        );\n    };\n    const TextInput = ({ type, id, label, error, value, onChange, className, ...props }) => {\n        const classes = classnames(\n                'input-group',\n                {\n                    'animated shake error': !!error,\n                },\n                className\n        );\n        return (\n                <div className={classes}>\n                    <Label htmlFor={id} error={error}>\n                        {label}\n                    </Label>\n                    <input\n                            id={id}\n                            className=\"text-input\"\n                            type={type}\n                            value={value}\n                            onChange={onChange}\n                            {...props}\n                    />\n                    <InputFeedback error={error} />\n                </div>\n        );\n    };\n    const MyForm = props => {\n        const {\n                  values,\n                  touched,\n                  errors,\n                  dirty,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  handleReset,\n                  isSubmitting,\n              } = props;\n        return (\n                <form onSubmit={handleSubmit}>\n                    <TextInput\n                            id=\"firstName\"\n                            type=\"text\"\n                            label=\"First Name\"\n                            placeholder=\"John\"\n                            error={touched.firstName && errors.firstName}\n                            value={values.firstName}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                    />\n                    <TextInput\n                            id=\"lastName\"\n                            type=\"text\"\n                            label=\"Last Name\"\n                            placeholder=\"Doe\"\n                            error={touched.lastName && errors.lastName}\n                            value={values.lastName}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                    />\n                    <TextInput\n                            id=\"email\"\n                            type=\"email\"\n                            label=\"Email\"\n                            placeholder=\"Enter your email\"\n                            error={touched.email && errors.email}\n                            value={values.email}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                    />\n                    <button\n                            type=\"button\"\n                            className=\"outline\"\n                            onClick={handleReset}\n                            disabled={!dirty || isSubmitting}\n                    >\n                        Reset\n                    </button>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Submit\n                    </button>\n\n                </form>\n        );\n    };\nconst MyEnhancedForm = formikEnhancer(MyForm);\nclass Reactcontactform extends React.Component {\n\n\n    render() {\n        return (\n                <MyEnhancedForm user={{ email: '', firstName: '', lastName: '' }} />\n        );\n    }\n}\n\nexport default Reactcontactform;"]},"metadata":{},"sourceType":"module"}