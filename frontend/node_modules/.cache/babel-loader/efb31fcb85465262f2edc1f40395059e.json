{"ast":null,"code":"import _objectSpread from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport validator from 'validator';\n\nvar FormValidator =\n/*#__PURE__*/\nfunction () {\n  function FormValidator(validations) {\n    _classCallCheck(this, FormValidator);\n\n    // validations is an array of rules specific to a form\n    this.validations = validations;\n  }\n\n  _createClass(FormValidator, [{\n    key: \"validate\",\n    value: function validate(state) {\n      // start out assuming valid\n      var validation = this.valid(); // for each validation rule\n\n      this.validations.forEach(function (rule) {\n        // if the field isn't already marked invalid by an earlier rule\n        if (!validation[rule.field].isInvalid) {\n          // determine the field value, the method to invoke and\n          // optional args from the rule definition\n          var field_value = state[rule.field].toString();\n          var args = rule.args || [];\n          var validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method; // call the validation_method with the current field value\n          // as the first argument, any additional arguments, and the\n          // whole state as a final argument.  If the result doesn't\n          // match the rule.validWhen property, then modify the\n          // validation object for the field and set the isValid\n          // field to false\n\n          if (validation_method.apply(void 0, [field_value].concat(_toConsumableArray(args), [state])) != rule.validWhen) {\n            validation[rule.field] = {\n              isInvalid: true,\n              message: rule.message\n            };\n            validation.isValid = false;\n          }\n        }\n      });\n      return validation;\n    } // create a validation object for a valid form\n\n  }, {\n    key: \"valid\",\n    value: function valid() {\n      var validation = {};\n      this.validations.map(function (rule) {\n        return validation[rule.field] = {\n          isInvalid: false,\n          message: ''\n        };\n      });\n      return _objectSpread({\n        isValid: true\n      }, validation);\n    }\n  }]);\n\n  return FormValidator;\n}();\n\nexport default FormValidator;","map":{"version":3,"sources":["/Users/stijnheynderickx/IdeaProjects/mellow2/frontend/src/components/FormValidator/FormValidator.jsx"],"names":["validator","FormValidator","validations","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","validation_method","method","validWhen","message","isValid","map"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;;IAEMC,a;;;AACF,yBAAYC,WAAZ,EAAyB;AAAA;;AACrB;AACA,SAAKA,WAAL,GAAmBA,WAAnB;AACH;;;;6BAEQC,K,EAAO;AACZ;AACA,UAAIC,UAAU,GAAG,KAAKC,KAAL,EAAjB,CAFY,CAGZ;;AACA,WAAKH,WAAL,CAAiBI,OAAjB,CAAyB,UAAAC,IAAI,EAAI;AAE7B;AACA,YAAG,CAACH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,CAAuBC,SAA3B,EAAsC;AAClC;AACA;AACA,cAAMC,WAAW,GAAGP,KAAK,CAACI,IAAI,CAACC,KAAN,CAAL,CAAkBG,QAAlB,EAApB;AACA,cAAMC,IAAI,GAAGL,IAAI,CAACK,IAAL,IAAa,EAA1B;AACA,cAAMC,iBAAiB,GAAG,OAAON,IAAI,CAACO,MAAZ,KAAuB,QAAvB,GAClBd,SAAS,CAACO,IAAI,CAACO,MAAN,CADS,GAElBP,IAAI,CAACO,MAFb,CALkC,CAQlC;AACA;AACA;AACA;AACA;AACA;;AACA,cAAGD,iBAAiB,MAAjB,UAAkBH,WAAlB,4BAAkCE,IAAlC,IAAwCT,KAAxC,OAAkDI,IAAI,CAACQ,SAA1D,EAAqE;AACjEX,YAAAA,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;AACrBC,cAAAA,SAAS,EAAE,IADU;AAErBO,cAAAA,OAAO,EAAIT,IAAI,CAACS;AAFK,aAAzB;AAIAZ,YAAAA,UAAU,CAACa,OAAX,GAAqB,KAArB;AACH;AACJ;AACJ,OAzBD;AA0BA,aAAOb,UAAP;AACH,K,CAED;;;;4BACQ;AACJ,UAAMA,UAAU,GAAG,EAAnB;AAEA,WAAKF,WAAL,CAAiBgB,GAAjB,CAAqB,UAAAX,IAAI;AAAA,eACjBH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;AACrBC,UAAAA,SAAS,EAAE,KADU;AAErBO,UAAAA,OAAO,EAAI;AAFU,SADR;AAAA,OAAzB;AAMA;AAAQC,QAAAA,OAAO,EAAE;AAAjB,SAA0Bb,UAA1B;AACH;;;;;;AAGL,eAAeH,aAAf","sourcesContent":["import validator from 'validator';\n\nclass FormValidator {\n    constructor(validations) {\n        // validations is an array of rules specific to a form\n        this.validations = validations;\n    }\n\n    validate(state) {\n        // start out assuming valid\n        let validation = this.valid();\n        // for each validation rule\n        this.validations.forEach(rule => {\n\n            // if the field isn't already marked invalid by an earlier rule\n            if(!validation[rule.field].isInvalid) {\n                // determine the field value, the method to invoke and\n                // optional args from the rule definition\n                const field_value = state[rule.field].toString();\n                const args = rule.args || [];\n                const validation_method = typeof rule.method === 'string' ?\n                        validator[rule.method] :\n                        rule.method;\n                // call the validation_method with the current field value\n                // as the first argument, any additional arguments, and the\n                // whole state as a final argument.  If the result doesn't\n                // match the rule.validWhen property, then modify the\n                // validation object for the field and set the isValid\n                // field to false\n                if(validation_method(field_value, ...args, state) != rule.validWhen) {\n                    validation[rule.field] = {\n                        isInvalid: true,\n                        message  : rule.message\n                    }\n                    validation.isValid = false;\n                }\n            }\n        });\n        return validation;\n    }\n\n    // create a validation object for a valid form\n    valid() {\n        const validation = {}\n\n        this.validations.map(rule => (\n                validation[rule.field] = {\n                    isInvalid: false,\n                    message  : ''\n                }\n        ));\n        return {isValid: true, ...validation};\n    }\n}\n\nexport default FormValidator;"]},"metadata":{},"sourceType":"module"}